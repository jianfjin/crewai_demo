from .crew_with_tracking import MarketingResearchCrew
import os
from datetime import datetime

def main():
    """
    Main function to run the Marketing Research Crew analysis on beverage sales data.
    This will generate a comprehensive marketing analysis report.
    """
    
    # Define the data path for beverage sales
    data_path = "data/beverage_sales.csv"
    
    # Comprehensive inputs for the marketing research analysis
    inputs = {
        "target_audience": "health-conscious millennials interested in premium beverages",
        "campaign_type": "multi-channel digital marketing",
        "budget": 100000,
        "duration": "6 months",
        "data_file_path": data_path,
        "analysis_focus": "beverage market performance and optimization",
        "business_objective": "Launch new organic beverage line and optimize existing product performance",
        "key_metrics": ["sales_trends", "regional_performance", "product_performance", "roi_analysis"],
        "competitive_landscape": "premium beverage market with focus on organic and health-conscious products",
        "market_segments": ["North", "South"],
        "product_lines": ["Green Tea", "Latte"],
        "campaign_goals": [
            "Increase market share in underperforming regions",
            "Optimize product mix based on sales data",
            "Develop targeted marketing strategies for each region",
            "Forecast sales for budget planning",
            "Create compelling content for health-conscious consumers"
        ]
    }
    
    # Configuration paths
    agents_config_path = 'src/marketing_research_swarm/config/agents.yaml'
    tasks_config_path = 'src/marketing_research_swarm/config/tasks.yaml'
    
    print("Starting Marketing Research Crew Analysis...")
    print(f"Analyzing data from: {data_path}")
    print(f"Target Audience: {inputs['target_audience']}")
    print(f"Campaign Budget: ${inputs['budget']:,}")
    print(f"Campaign Duration: {inputs['duration']}")
    print("-" * 60)
    
    try:
        # Initialize and run the crew
        crew = MarketingResearchCrew(agents_config_path, tasks_config_path)
        result = crew.kickoff(inputs)
        
        # Generate timestamp for the report
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        
        # Save the analysis report
        report_filename = f"marketing_analysis_report_{timestamp}.md"
        report_path = os.path.join("reports", report_filename)
        
        # Create reports directory if it doesn't exist
        os.makedirs("reports", exist_ok=True)
        
        # Format and save the report
        formatted_report = f"""# Marketing Research Analysis Report
Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Executive Summary
This comprehensive marketing research analysis was conducted using AI-powered agents to analyze beverage sales data and provide strategic recommendations for campaign optimization.

## Analysis Parameters
- **Target Audience**: {inputs['target_audience']}
- **Campaign Type**: {inputs['campaign_type']}
- **Budget**: ${inputs['budget']:,}
- **Duration**: {inputs['duration']}
- **Data Source**: {inputs['data_file_path']}

## Detailed Analysis Results

{result}

---
*Report generated by Marketing Research Swarm - AI-Powered Marketing Analytics*
"""
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(formatted_report)
        
        print("\n" + "="*60)
        print("MARKETING RESEARCH ANALYSIS COMPLETED!")
        print("="*60)
        print(f"Report saved to: {report_path}")
        print("\nANALYSIS RESULTS:")
        print("-" * 40)
        print(result)
        
    except Exception as e:
        print(f"Error running marketing research analysis: {str(e)}")
        print("Please check your configuration files and data path.")

def run_specific_analysis(analysis_type="comprehensive"):
    """
    Run specific types of analysis based on the analysis_type parameter.
    
    Args:
        analysis_type (str): Type of analysis to run
            - "comprehensive": Full marketing research analysis
            - "sales_forecast": Focus on sales forecasting
            - "roi_analysis": Focus on ROI and budget optimization
            - "brand_performance": Focus on brand performance metrics
    """
    
    data_path = "data/beverage_sales.csv"
    
    if analysis_type == "sales_forecast":
        inputs = {
            "analysis_focus": "sales forecasting and trend analysis",
            "data_file_path": data_path,
            "forecast_periods": 30,
            "business_objective": "Predict future sales performance for strategic planning"
        }
    elif analysis_type == "roi_analysis":
        inputs = {
            "analysis_focus": "ROI calculation and budget optimization",
            "budget": 100000,
            "expected_revenue": 250000,
            "business_objective": "Optimize marketing spend and calculate expected returns"
        }
    elif analysis_type == "brand_performance":
        inputs = {
            "analysis_focus": "brand performance and market positioning",
            "brand_metrics": {
                "brand_awareness": 65,
                "sentiment_score": 7.5,
                "market_position": 3
            },
            "business_objective": "Assess brand health and competitive positioning"
        }
    else:
        # Default to comprehensive analysis
        return main()
    
    agents_config_path = 'src/marketing_research_swarm/config/agents.yaml'
    tasks_config_path = 'src/marketing_research_swarm/config/tasks.yaml'
    
    crew = MarketingResearchCrew(agents_config_path, tasks_config_path)
    result = crew.kickoff(inputs)
    
    print(f"\n{analysis_type.upper()} ANALYSIS RESULTS:")
    print("-" * 50)
    print(result)
    
    return result

if __name__ == "__main__":
    main()